esphome:
  name: esp32-powermeter
  friendly_name: esp32-powermeter

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0
# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 
    gateway: 
    subnet: 
    dns1: 
    dns2: 
    
  power_save_mode: NONE

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ""
    password: ""

captive_portal:

uart:
  - id: ubus1
    tx_pin: GPIO1
    rx_pin: GPIO3
    baud_rate: 9600
    stop_bits: 2     #For ESP32 try value 2

time:
  - platform: homeassistant
    id: homeassistant_time
      
#### PZEM-004T V3 ####
sensor:
  - platform: pzemac
    id: pzemac_1
    address: 1
    current:
      name: "p_current"
      id: p_current
      accuracy_decimals: 2
    voltage:
      name: "p_voltage"
      id: p_voltage
      accuracy_decimals: 2
    power:
      name: "p_watt"
      id: p_watt
      unit_of_measurement: W
      accuracy_decimals: 2
    frequency:
      name: "p_frequency"
      id: p_frequency
      unit_of_measurement: Hz
      accuracy_decimals: 2
    power_factor:
      name: "p_power_factory"
      id: p_power_factory
      accuracy_decimals: 2
    energy:
      name: "p_energy"
      id: p_energy
      unit_of_measurement: Kwh
      filters:
        - multiply: 0.001
      accuracy_decimals: 4
    update_interval: 5s

  - platform: total_daily_energy
    name: "Total Daily Energy"
    unit_of_measurement: kWh
    accuracy_decimals: 4
    power_id: p_energy
    id: total_dialy_energy

  - platform: wifi_signal
    name: "WiFi power_pMeter"
    update_interval: 10s
    
  - platform: uptime
    name: "up"
    id: uptime_sec

binary_sensor:
  - platform: status
    name: "pMeter_status"    
      
text_sensor:
  - platform: template
    name: pMeter_uptime
    lambda: |-
      int seconds = (id(uptime_sec).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600); 
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
    icon: mdi:clock-start
    update_interval: 60s
  
switch:
  - platform: restart
    name: "pMeter_restart"

button:
  - platform: template
    name: "Reset Energy"
    on_press:
      - pzemac.reset_energy: pzemac_1

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true

display:
  - platform: lcd_pcf8574
    dimensions: 
      - 20
      - 4
    address: 0x27
    update_interval: 5s
    lambda: |-

      // Print Power (W) and Current (A)
      it.printf(0, 0, "Volt:%.2f", id(p_voltage).state);
      it.printf(12, 0, "Amp:%.2f", id(p_current).state);

      // Print Voltage (V) and Frequency (Hz)
      it.printf(0, 1, "Watt:%.2f", id(p_watt).state);
      it.printf(12, 1, "Hz:%.12f", id(p_frequency).state);

      // Print Voltage (V) and Frequency (Hz)
      it.printf(0, 2, "Kwh:%.4f", id(p_energy).state);
      it.printf(12, 2, "PF:%.2f", id(p_power_factory).state);

      // Print Time (HH:MM format)
      it.printf(0, 3, "THB:%.2f", (id(p_energy).state)*4.70);
      it.strftime(12, 3, "T:%H:%M", id(homeassistant_time).now());
